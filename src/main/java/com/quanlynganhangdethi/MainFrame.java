// src/main/java/com/quanlynganhangdethi/MainFrame.java
package com.quanlynganhangdethi;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout; // S·∫Ω d√πng GridBagLayout cho sidebar
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;

import com.quanlynganhangdethi.ui.CauHoi.CauHoiPanel;
import com.quanlynganhangdethi.ui.ChuDe.ChuDePanel;
import com.quanlynganhangdethi.ui.dethi.DeThiPanel;
import com.quanlynganhangdethi.ui.taodethithu.TaoDeThiThuPanel;

public class MainFrame extends JFrame {
	private JPanel mainPanel; // Panel n·ªôi dung ch√≠nh (CardLayout)
	private CardLayout cardLayout;
	private JPanel sidebar; // Panel sidebar

	// C√°c panel con
	private ChuDePanel chuDePanel;
	private CauHoiPanel cauHoiPanel;
	private DeThiPanel deThiPanel;
	private TaoDeThiThuPanel taoDeThiThuPanel;

	// M√†u s·∫Øc v√† font (t√πy ch·ªânh d·ª±a tr√™n FlatLaf ho·∫∑c s·ªü th√≠ch)
	private Color sidebarBackgroundColor = UIManager.getColor("Panel.background"); // L·∫•y m√†u t·ª´ L&F
	private Color sidebarButtonForegroundColor = UIManager.getColor("Button.foreground");
	private Color sidebarButtonHoverBackgroundColor = UIManager.getColor("List.selectionBackground");
	private Color sidebarButtonSelectedBackgroundColor = UIManager.getColor("List.selectionInactiveBackground"); // Ho·∫∑c
																													// ...Focus.selectionBackground
	private Color sidebarButtonSelectedForegroundColor = UIManager.getColor("List.selectionForeground"); // M√†u ch·ªØ khi
																											// n√∫t ƒë∆∞·ª£c
																											// ch·ªçn
	private Font sidebarButtonFont = new Font("Segoe UI", Font.PLAIN, 15);
	private Font sidebarTitleFont = new Font("Segoe UI", Font.BOLD, 18);

	private JButton lastSelectedButton = null; // ƒê·ªÉ theo d√µi n√∫t ƒëang ƒë∆∞·ª£c ch·ªçn

	public MainFrame() {
		setTitle("Ph·∫ßn m·ªÅm Qu·∫£n l√Ω Ng√¢n h√†ng ƒê·ªÅ thi Ti·∫øng Nh·∫≠t");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(1200, 750); // K√≠ch th∆∞·ªõc c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh
		setLocationRelativeTo(null);
		setLayout(new BorderLayout(0, 0)); // B·ªè kho·∫£ng c√°ch gi·ªØa c√°c component BorderLayout

		// --- Panel N·ªôi dung ch√≠nh (B√™n ph·∫£i) ---
		cardLayout = new CardLayout();
		mainPanel = new JPanel(cardLayout);
		mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Padding cho n·ªôi dung

		// Kh·ªüi t·∫°o c√°c panel con
		chuDePanel = new ChuDePanel();
		cauHoiPanel = new CauHoiPanel();
		deThiPanel = new DeThiPanel();
		taoDeThiThuPanel = new TaoDeThiThuPanel();

		// Panel ch√†o m·ª´ng c·∫£i ti·∫øn
		JPanel welcomePanel = new JPanel(new BorderLayout());
		JLabel welcomeLabel = new JLabel("<html><div style='text-align: center; padding: 20px;'>"
				+ "<h1 style='color: #2c3e50; font-size: 28px;'>üëã Ch√†o m·ª´ng b·∫°n!</h1>"
				+ "<p style='color: #34495e; font-size: 16px;'>Ph·∫ßn m·ªÅm Qu·∫£n l√Ω Ng√¢n h√†ng ƒê·ªÅ thi Ti·∫øng Nh·∫≠t</p>"
				+ "<hr style='width:50%; margin-top: 15px; margin-bottom: 15px;'>"
				+ "<p style='color: #7f8c8d; font-size: 14px;'>Ch·ªçn m·ªôt ch·ª©c nƒÉng t·ª´ thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>"
				+ "</div></html>", SwingConstants.CENTER);
		// welcomeLabel.setIcon(new
		// ImageIcon(getClass().getResource("/icons/welcome_banner.png"))); // Th√™m ·∫£nh
		// n·∫øu mu·ªën
		welcomePanel.add(welcomeLabel, BorderLayout.CENTER);

		mainPanel.add(welcomePanel, "WELCOME_PANEL");
		mainPanel.add(chuDePanel, "CHU_DE_PANEL");
		mainPanel.add(cauHoiPanel, "CAU_HOI_PANEL");
		mainPanel.add(deThiPanel, "DE_THI_PANEL");
		mainPanel.add(taoDeThiThuPanel, "TAO_DE_THI_THU_PANEL");

		// --- T·∫°o Sidebar (B√™n tr√°i) ---
		sidebar = createSidebar();

		// Th√™m sidebar v√† mainPanel v√†o JFrame
		getContentPane().add(sidebar, BorderLayout.WEST);
		getContentPane().add(mainPanel, BorderLayout.CENTER);

		// Hi·ªÉn th·ªã panel ch√†o m·ª´ng ban ƒë·∫ßu v√† ch·ªçn n√∫t t∆∞∆°ng ·ª©ng
		cardLayout.show(mainPanel, "WELCOME_PANEL");
		// T√¨m n√∫t "Trang ch·ªß" v√† set n√≥ l√† selected ban ƒë·∫ßu
		for (Component comp : sidebar.getComponents()) {
			if (comp instanceof JButton && "WELCOME_PANEL".equals(((JButton) comp).getName())) {
				setSelectedButton((JButton) comp);
				break;
			}
		}
	}

	private JPanel createSidebar() {
		JPanel sidebarPanel = new JPanel();
		sidebarPanel.setLayout(new GridBagLayout()); // D√πng GridBagLayout ƒë·ªÉ ki·ªÉm so√°t t·ªët h∆°n
		sidebarPanel.setPreferredSize(new Dimension(230, 0)); // ƒê·ªô r·ªông sidebar
		sidebarPanel.setBackground(sidebarBackgroundColor);
		sidebarPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, UIManager.getColor("Separator.foreground"))); // ƒê∆∞·ªùng
																															// k·∫ª
																															// ph·∫£i

		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridwidth = GridBagConstraints.REMAINDER; // M·ªói component chi·∫øm h·∫øt chi·ªÅu r·ªông
		gbc.fill = GridBagConstraints.HORIZONTAL; // K√©o d√†i theo chi·ªÅu ngang
		gbc.weightx = 1.0; // Cho ph√©p co gi√£n theo chi·ªÅu ngang
		gbc.insets = new Insets(8, 10, 8, 10); // Padding cho m·ªói n√∫t (top, left, bottom, right)

		// Ti√™u ƒë·ªÅ Sidebar (t√πy ch·ªçn)
		JLabel titleLabel = new JLabel("  MENU CH√çNH"); // Th√™m kho·∫£ng tr·∫Øng cho ƒë·∫πp
		titleLabel.setFont(sidebarTitleFont);
		titleLabel.setForeground(UIManager.getColor("Label.foreground"));
		titleLabel.setBorder(new EmptyBorder(15, 5, 15, 5)); // Padding cho ti√™u ƒë·ªÅ
		titleLabel.setHorizontalAlignment(SwingConstants.LEFT);
		gbc.anchor = GridBagConstraints.NORTHWEST; // ƒê·∫©y l√™n tr√™n v√† sang tr√°i
		sidebarPanel.add(titleLabel, gbc);

		gbc.insets = new Insets(4, 10, 4, 10); // Padding nh·ªè h∆°n cho c√°c n√∫t

		// T·∫°o v√† th√™m c√°c n√∫t v√†o sidebar
		sidebarPanel.add(createSidebarButton("Trang ch·ªß", "/icons/home.png", "WELCOME_PANEL"), gbc);
		sidebarPanel.add(createSidebarButton("Qu·∫£n l√Ω Ch·ªß ƒë·ªÅ", "/icons/chude.png", "CHU_DE_PANEL"), gbc);
		sidebarPanel.add(createSidebarButton("Qu·∫£n l√Ω C√¢u h·ªèi", "/icons/questions.png", "CAU_HOI_PANEL"), gbc);
		sidebarPanel.add(createSidebarButton("Qu·∫£n l√Ω ƒê·ªÅ thi", "/icons/dethi.png", "DE_THI_PANEL"), gbc);
		sidebarPanel.add(createSidebarButton("T·∫°o ƒê·ªÅ thi th·ª≠", "/icons/export.png", "TAO_DE_THI_THU_PANEL"), gbc);

		// Spacer ƒë·ªÉ ƒë·∫©y n√∫t Tho√°t xu·ªëng d∆∞·ªõi
		gbc.weighty = 1.0; // Cho ph√©p co gi√£n theo chi·ªÅu d·ªçc, ƒë·∫©y c√°c component kh√°c l√™n
		JPanel spacer = new JPanel();
		spacer.setOpaque(false);
		sidebarPanel.add(spacer, gbc);
		gbc.weighty = 0.0; // Reset l·∫°i

		sidebarPanel.add(createSidebarButton("Tho√°t ·ª®ng D·ª•ng", "/icons/exit.png", "EXIT_ACTION"), gbc);

		return sidebarPanel;
	}

	private JButton createSidebarButton(String text, String iconPath, final String actionCommandOrPanelName) {
		JButton button = new JButton(text);
		button.setName(actionCommandOrPanelName); // G√°n t√™n ƒë·ªÉ d·ªÖ t√¨m l·∫°i cho vi·ªác set selected ban ƒë·∫ßu
		button.setFont(sidebarButtonFont);
		button.setForeground(sidebarButtonForegroundColor);
		button.setFocusPainted(false);
		button.setBorderPainted(false); // FlatLaf th∆∞·ªùng x·ª≠ l√Ω border t·ªët
		button.setContentAreaFilled(false); // Quan tr·ªçng ƒë·ªÉ v·∫Ω n·ªÅn t√πy ch·ªânh
		button.setOpaque(false);
		button.setHorizontalAlignment(SwingConstants.LEFT);
		button.setCursor(new Cursor(Cursor.HAND_CURSOR));
		button.setIconTextGap(12); // Kho·∫£ng c√°ch gi·ªØa icon v√† text
		button.setPreferredSize(new Dimension(0, 45)); // Chi·ªÅu cao c·ªë ƒë·ªãnh, chi·ªÅu r·ªông s·∫Ω theo GridBagLayout

		// Set icon (b·∫°n c·∫ßn c√≥ c√°c file icon, v√≠ d·ª• trong src/main/resources/icons)
		try {
			ImageIcon icon = new ImageIcon(getClass().getResource(iconPath));
			Image img = icon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH); // K√≠ch th∆∞·ªõc icon
			button.setIcon(new ImageIcon(img));
		} catch (Exception e) {
			System.err.println("L·ªói t·∫£i icon: " + iconPath + " cho n√∫t " + text);
			// C√≥ th·ªÉ ƒë·∫∑t m·ªôt icon m·∫∑c ƒë·ªãnh ho·∫∑c kho·∫£ng tr·ªëng
			button.setIcon(new ImageIcon(new byte[0])); // Icon r·ªóng
		}

		// Th√™m padding b√™n trong n√∫t th√¥ng qua border
		button.setBorder(new EmptyBorder(0, 15, 0, 10)); // top, left, bottom, right

		// Hi·ªáu ·ª©ng Hover v√† Click
		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				if (!button.isSelected()) {
					button.setOpaque(true); // ƒê·ªÉ v·∫Ω n·ªÅn hover
					button.setBackground(sidebarButtonHoverBackgroundColor);
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {
				if (!button.isSelected()) {
					button.setOpaque(false); // T·∫Øt opaque ƒë·ªÉ tr·ªü v·ªÅ n·ªÅn c·ªßa sidebar
					button.setBackground(sidebarBackgroundColor); // Ho·∫∑c null
				}
			}
		});

		button.addActionListener(e -> {
			if ("EXIT_ACTION".equals(actionCommandOrPanelName)) {
				System.exit(0);
			} else {
				cardLayout.show(mainPanel, actionCommandOrPanelName);
				setSelectedButton(button);
			}
		});
		return button;
	}

	private void setSelectedButton(JButton selectedBtn) {
		if (lastSelectedButton != null) {
			lastSelectedButton.setSelected(false);
			lastSelectedButton.setOpaque(false);
			lastSelectedButton.setBackground(sidebarBackgroundColor); // Ho·∫∑c null
			lastSelectedButton.setForeground(sidebarButtonForegroundColor);
			// lastSelectedButton.setFont(sidebarButtonFont); // Reset font n·∫øu c√≥ thay ƒë·ªïi
		}
		selectedBtn.setSelected(true);
		selectedBtn.setOpaque(true); // Ph·∫£i true ƒë·ªÉ m√†u n·ªÅn ƒë∆∞·ª£c v·∫Ω
		selectedBtn.setBackground(sidebarButtonSelectedBackgroundColor);
		selectedBtn.setForeground(sidebarButtonSelectedForegroundColor); // Thay ƒë·ªïi m√†u ch·ªØ khi ch·ªçn
		// selectedBtn.setFont(sidebarButtonFont.deriveFont(Font.BOLD)); // L√†m ƒë·∫≠m ch·ªØ
		// khi ch·ªçn

		lastSelectedButton = selectedBtn;
		sidebar.revalidate();
		sidebar.repaint();
	}

	// C·∫ßn t·∫°o c√°c file icon:
	// src/main/resources/icons/home.png
	// src/main/resources/icons/chude.png
	// src/main/resources/icons/questions.png
	// src/main/resources/icons/dethi.png
	// src/main/resources/icons/export.png
	// src/main/resources/icons/exit.png
	// (K√≠ch th∆∞·ªõc g·ª£i √Ω: 24x24 ho·∫∑c 32x32 pixels)
}